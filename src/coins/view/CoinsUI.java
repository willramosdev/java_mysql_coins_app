/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coins.view;

import auth.model.User;
import coins.controller.CoinsController;
import coins.model.Coin;
import coins.model.Wallet;
import static java.lang.Math.round;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Will
 */
public final class CoinsUI extends javax.swing.JFrame {
   
    private CoinsController cc;
    private Wallet CurrentWallet = null;
    private User CurrentUser = null;
    ArrayList<ArrayList<String>> CurrentTableData;
    private int CurrentMoedaId; 
    /**
     *          
     * Creates new form CoinsUI
     */
    
    public CoinsUI(User user) throws SQLException {
        this.cc = new CoinsController(user);
        this.CurrentUser = user;
        this.CurrentWallet = cc.getWallet();
        this.CurrentTableData = cc.getTableData();
        initComponents();
        alteraComponents();
        
    }
    
    public void alteraComponents(){
        userName.setText(CurrentUser.getNome());
        reais.setText(String.valueOf(CurrentWallet.getDinheiro()));
    }
    
    public void atualizaTabela() {
        ArrayList<ArrayList<String>> newTableData = null;
        try {
            newTableData = cc.getTableData();
        } catch (SQLException ex) {
            System.out.println("erro:" + ex);
        }
        DefaultTableModel dtm = new DefaultTableModel(0, 0);
        String header[] = new String[] {"Moeda", "Quantidade", "Cotação", "Total(R$)"};
        dtm.setColumnIdentifiers(header);
        jTable1.setModel(dtm);
        // add row dynamically into the table      
        for (int i = 0; i < newTableData.size(); i++) {
            dtm.addRow(new Object[] { 
                newTableData.get(i).get(0), 
                newTableData.get(i).get(1), 
                newTableData.get(i).get(2), 
                newTableData.get(i).get(3) 
            });
        }
        int x = jTable1.getSelectedRow();
        System.out.println(x);
        int y = jTable1.getSelectedColumn();
        System.out.println(y);
    }
    
    public void atualizaDinheiro () {
        try {
            this.reais.setText(String.valueOf(cc.getWallet().getDinheiro()));
        } catch (SQLException e) {
            System.out.println("Erro: " + e);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        userName = new java.awt.Label();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        reais = new java.awt.Label();
        jLabel3 = new javax.swing.JLabel();
        btnRemoveDinheiro = new javax.swing.JButton();
        btnAddDinheiro = new javax.swing.JButton();
        addOrRemoveDinheiro = new javax.swing.JTextField();
        btnSair = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnAtualizacotacao = new javax.swing.JButton();
        btnVendeCoin = new javax.swing.JButton();
        addOrRemoveCoin = new javax.swing.JTextField();
        btnCompraCoin = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Bem vindo");

        userName.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        userName.setText("label1");

        jLabel2.setText("R$:");

        reais.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        reais.setText("label1");

        jLabel3.setText("Sua carteira:");

        btnRemoveDinheiro.setText("Retirar");
        btnRemoveDinheiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDinheiroActionPerformed(evt);
            }
        });

        btnAddDinheiro.setText("Adicionar");
        btnAddDinheiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDinheiroActionPerformed(evt);
            }
        });

        addOrRemoveDinheiro.setEnabled(false);
        addOrRemoveDinheiro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                addOrRemoveDinheiroFocusLost(evt);
            }
        });
        addOrRemoveDinheiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrRemoveDinheiroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator1)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reais, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addOrRemoveDinheiro, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddDinheiro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveDinheiro)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(8, 8, 8)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(reais, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnRemoveDinheiro)
                        .addComponent(btnAddDinheiro)
                        .addComponent(addOrRemoveDinheiro, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        userName.getAccessibleContext().setAccessibleName("");
        reais.getAccessibleContext().setAccessibleName("label2");

        btnSair.setText("SAIR");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        jLabel4.setText("Moedas");

        DefaultTableModel dtm = new DefaultTableModel(0, 0);
        String header[] = new String[] {"Moeda", "Quantidade", "Cotação", "Total(R$)"};
        dtm.setColumnIdentifiers(header);
        jTable1.setModel(dtm);
        // add row dynamically into the table
        for (int i = 0; i < CurrentTableData.size(); i++) {
            dtm.addRow(new Object[] {
                this.CurrentTableData.get(i).get(0),
                this.CurrentTableData.get(i).get(1),
                this.CurrentTableData.get(i).get(2),
                this.CurrentTableData.get(i).get(3)
            });
        }
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnAtualizacotacao.setText("Atualizar Cotações");
        btnAtualizacotacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizacotacaoActionPerformed(evt);
            }
        });

        btnVendeCoin.setText("Vender");
        btnVendeCoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVendeCoinActionPerformed(evt);
            }
        });

        addOrRemoveCoin.setEnabled(false);
        addOrRemoveCoin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                addOrRemoveCoinFocusLost(evt);
            }
        });
        addOrRemoveCoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrRemoveCoinActionPerformed(evt);
            }
        });

        btnCompraCoin.setText("Comprar");
        btnCompraCoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompraCoinActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Quantidade");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnAtualizacotacao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addOrRemoveCoin, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCompraCoin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVendeCoin)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSair)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addOrRemoveCoin)
                    .addComponent(btnCompraCoin)
                    .addComponent(btnVendeCoin)
                    .addComponent(btnAtualizacotacao)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(btnSair)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddDinheiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDinheiroActionPerformed
        
        System.out.println(addOrRemoveDinheiro.isEnabled());
        if (addOrRemoveDinheiro.isEnabled()) {
            
            //pega id da carteira atual
            int id = CurrentWallet.getId();
            
            //pega valor do input
            double valor = Double.parseDouble(addOrRemoveDinheiro.getText());
            
            //soma o valor do input com o valor atual
            valor = valor + Double.parseDouble(reais.getText());
            System.out.println("valor a ser adicionado: " + valor);
            try {
                //atualiza o valor no banco e a label do dinheiro
                reais.setText(String.valueOf(cc.adicionarDinheiro(id, valor)));
            } catch (SQLException ex) {
                System.out.println("Erro: " + ex);
            }
            addOrRemoveDinheiro.setText("");
            addOrRemoveDinheiro.setEnabled(false);
        } else {
            addOrRemoveDinheiro.setEnabled(true);
        }

    }//GEN-LAST:event_btnAddDinheiroActionPerformed

    private void btnRemoveDinheiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDinheiroActionPerformed
        if (addOrRemoveDinheiro.isEnabled()) {
            int id = CurrentUser.getId();
            double valor = Double.parseDouble(addOrRemoveDinheiro.getText());
            valor = Double.parseDouble(reais.getText()) - valor ;
            if (valor > 0) {
                try {
                    reais.setText(String.valueOf(cc.adicionarDinheiro(id, valor)));
                    addOrRemoveDinheiro.setText("");
                    addOrRemoveDinheiro.setEnabled(false);
                } catch (SQLException ex) {
                    Logger.getLogger(CoinsUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(
                    null, 
                    "Você não pode retirar mais do que possui."
                );
            }
        } else {
            addOrRemoveDinheiro.setEnabled(true);
        }
    }//GEN-LAST:event_btnRemoveDinheiroActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnAtualizacotacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizacotacaoActionPerformed
        atualizaTabela();
    }//GEN-LAST:event_btnAtualizacotacaoActionPerformed

    private void btnVendeCoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVendeCoinActionPerformed
        //testa se alguma moeda foi selecionada e se o input está disponivel
        if (addOrRemoveCoin.isEnabled() & this.CurrentMoedaId > 0) {
            //pega quantidade do input
            double quantidade = Double.parseDouble(addOrRemoveCoin.getText());
            //faz a venda da moeda
            cc.vendeMoeda(this.CurrentMoedaId, quantidade);
            atualizaTabela();
            atualizaDinheiro();
            addOrRemoveCoin.setText("");
            addOrRemoveCoin.setEnabled(false);
        
        } else if(this.CurrentMoedaId < 1){
            JOptionPane.showMessageDialog(null, "Selecione uma moeda.");
        } else {
            addOrRemoveCoin.setEnabled(true);
        }
        
        
    }//GEN-LAST:event_btnVendeCoinActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        this.CurrentMoedaId = jTable1.getSelectedRow() + 1;
    }//GEN-LAST:event_jTable1MouseClicked

    private void addOrRemoveCoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrRemoveCoinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addOrRemoveCoinActionPerformed

    private void addOrRemoveDinheiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrRemoveDinheiroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addOrRemoveDinheiroActionPerformed

    private void btnCompraCoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompraCoinActionPerformed
        if (addOrRemoveCoin.isEnabled() & this.CurrentMoedaId > 0) {
            try {
                //pega o id da carteira
                int idCarteira = this.CurrentWallet.getId();
                
                //pega a moeda com base na linha selecionada
                Coin moeda = cc.getCoin(this.CurrentMoedaId);
                
                //pega cotação da moeda
                double cotacao = moeda.getCotacao();
                
                //pega o valor do input
                double quantidade = Double.parseDouble(addOrRemoveCoin.getText());
                
                //converte o valor em reais para descontar da carteira
                double valor = quantidade * cotacao;
                
                //retorna TRUE caso tenha limite
                boolean verificaLimite = cc.testeLimite(valor);
                
                //soma as unidades atuais da moeda com a quantidade da compra
                quantidade = quantidade + moeda.getUnidades();
                valor = this.CurrentWallet.getDinheiro() - valor;
                
                if (verificaLimite) {
                    //faz a compra da moeda
                    cc.compraMoeda(
                            idCarteira, 
                            this.CurrentMoedaId, 
                            valor, 
                            quantidade
                    );
                    atualizaTabela();
                    atualizaDinheiro();
                    addOrRemoveCoin.setText("");
                    addOrRemoveCoin.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(
                            null, 
                            "Você não tem limite para essa operação."
                    );
                    
                }
            } catch (SQLException ex) {
                System.out.println("Erro: " + ex);
            }
            
        } else if(this.CurrentMoedaId < 1){
            JOptionPane.showMessageDialog(null, "Selecione uma moeda.");
        } else {
            addOrRemoveCoin.setEnabled(true);
        }
    }//GEN-LAST:event_btnCompraCoinActionPerformed

    private void addOrRemoveDinheiroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addOrRemoveDinheiroFocusLost
        //addOrRemoveDinheiro.setText("");
        //addOrRemoveDinheiro.setEnabled(false);
    }//GEN-LAST:event_addOrRemoveDinheiroFocusLost

    private void addOrRemoveCoinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addOrRemoveCoinFocusLost
        //addOrRemoveCoin.setText("");
        //addOrRemoveCoin.setEnabled(false);
    }//GEN-LAST:event_addOrRemoveCoinFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addOrRemoveCoin;
    private javax.swing.JTextField addOrRemoveDinheiro;
    private javax.swing.JButton btnAddDinheiro;
    private javax.swing.JButton btnAtualizacotacao;
    private javax.swing.JButton btnCompraCoin;
    private javax.swing.JButton btnRemoveDinheiro;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnVendeCoin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private java.awt.Label reais;
    private java.awt.Label userName;
    // End of variables declaration//GEN-END:variables
    
    
    
        
}

